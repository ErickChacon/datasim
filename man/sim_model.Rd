% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sim-model.R
\name{sim_model}
\alias{sim_model}
\title{Simulate databases based in models}
\usage{
sim_model(formula = list(mean ~ I(0), sd ~ I(1)),
  link_inv = replicate(length(formula), identity), generator = rnorm,
  n = nrow(init_data), responses = c("response"), init_data = NULL,
  effects_save = FALSE, seed = NULL)
}
\arguments{
\item{formula}{List of the parameters, indicating how they should be computed.
similar to formula for \code{lm}, \code{glm}, \code{bamlss}, with the difference
that it included the coefficients and link function explicitly.}

\item{link_inv}{A list of function representing the inverse link function for the
parameters.}

\item{generator}{Function to generate the response variables given the parameters}

\item{n}{Number of observations to be simulated}

\item{responses}{character vector indicating the names of the response variables}

\item{init_data}{Initial data including some variables to not been simulated.}

\item{effects_save}{Optional logical argument to save or not generated random
effects}

\item{seed}{Seed to be defined with function \code{set.seed} to obtain reproducible
results}
}
\value{
A \code{tibble} containing the simulated predictors, parameters and response
variable
}
\description{
\code{sim_model} simulate a database based on common models. The structure
used to create the data is similar as the \code{bamlss.formula}.
}
\examples{

f <- list(
  mean ~ I(5 + 0.5 * x1 + 0.1 * x2 + 0.7 * id1),
  sd ~ exp(x1)
)
(model_frame(f, n = 10))
(data <- sim_model(f, n = 100))

# Structure of the model
formula <- list(
  mean ~ I(age ^ 2) + fa(sex, beta = c(-1, 1)),
  sd ~ fa(sex, beta = c(1, 2))
)
idata <- data.frame(s1 = 1:10)
(datasim <- model_frame(formula, idata = idata))
(datasim <- model_frame(formula, n = 10))
(data <- model_frame(formula, n = 10))
(model_response(data))
(datasim2 <- sim_model(formula, n = 10))
library(magrittr)
model_frame(formula, n = 10) \%>\% model_response()

f <- list(
  mean ~ gp(list(s1), "exp_cor", list(phi = 0.05)),
  sd ~ I(1.6)
)
(data <- sim_model(f, n = 400))
plot(mean ~ s1, data)
plot(response ~ s1, data)

formula <- list(
mean ~ I(0.5 * x1) : I(x2) + re(city, 1, 2),
sd ~ I(1)
)
data <- sim_model(formula, n = 10, effects_save = TRUE)

}
\author{
Erick A. Chacon-Montalvan
}
